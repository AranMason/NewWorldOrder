{"version":3,"sources":["state/actions/todo.ts","components/SuperMarket.tsx","App.tsx","serviceWorker.ts","state/actions/index.ts","state/reducers/todo.ts","state/reducers/index.ts","state/store.ts","index.tsx"],"names":["ADD","AddTodo","data","type","payload","DELETE","DeleteTodo","SuperMarket","props","state","isLoading","openings","Axios","get","this","id","then","res","console","log","setState","slots","sort","a","b","Date","parse","date","timeSlots","days","i","length","indexOf","slot","j","timeSlot","available","className","moment","format","name","renderNextOpenSpace","React","Component","App","title","supermarkets","userLocation","latitude","longitude","gotUserLocation","bind","pos","stores","coords","navigator","geolocation","getCurrentPosition","map","store","getDistance","key","renderIsLoading","connect","todo","dispatch","Boolean","window","location","hostname","match","initialState","rootReducer","combineReducers","action","ACTION","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8443a8b2.chunk.js","sourcesContent":["import * as Types from '../../models/Types';\r\n\r\nexport const ADD = 'ADD_TODO';\r\nexport function AddTodo(data: Types.AddTodo): Types.ActionAddTodo {\r\n  return {\r\n    type: ADD,\r\n    payload: data,\r\n  };\r\n}\r\n\r\nexport const DELETE = 'DELETE_TODO';\r\nexport function DeleteTodo(data: Types.DeleteTodo): Types.ActionDeleteTodo {\r\n  return {\r\n    type: DELETE,\r\n    payload: data,\r\n  };\r\n}\r\n\r\nexport type TodoTypes = Types.ActionAddTodo | Types.ActionDeleteTodo;\r\n","import React from 'react';\r\nimport { SuperMarketStore, SuperMarketOpenings } from '../models/Types';\r\nimport moment from 'moment';\r\nimport Axios from 'axios';\r\n\r\nimport './SuperMarket.css';\r\n\r\ninterface State {\r\n  isLoading: boolean;\r\n  openings: SuperMarketOpenings[]\r\n}\r\n\r\ninterface Props {\r\n\r\n}\r\n\r\nclass SuperMarket extends React.Component<SuperMarketStore, State>{\r\n  constructor(props: SuperMarketStore) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      isLoading: true,\r\n      openings: [],\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    Axios.get(`https://www.ishopnewworld.co.nz/CommonApi/Delivery/GetClickCollectTimeSlot?id=${this.props.id}`).then(res => {\r\n      var data = res.data as {\r\n        slots: SuperMarketOpenings[];\r\n      }\r\n\r\n      console.log(res);\r\n\r\n      this.setState({\r\n        openings: data.slots.sort((a, b) => {\r\n\r\n          var date_a = Date.parse(a.date);\r\n          var date_b = Date.parse(b.date);\r\n\r\n          return date_a - date_b;\r\n        })\r\n      })\r\n\r\n    })\r\n  }\r\n\r\n  renderNextOpenSpace() {\r\n\r\n    const timeSlots = [\"07:30AM - 08:00AM\", \"08:00AM - 08:30AM\", \"09:00AM - 09:30AM\", \"10:00AM - 10:30AM\", \"11:00AM - 11:30AM\", \"12:00PM - 12:30PM\", \"01:00PM - 01:30PM\", \"02:00PM - 02:30PM\", \"03:00PM - 03:30PM\"]\r\n\r\n    var days = this.state.openings;\r\n\r\n    for (var i = 0; i < days.length; i++) {\r\n\r\n      var slots = days[i].timeSlots;\r\n\r\n      slots.sort((a, b) => {\r\n        return timeSlots.indexOf(a.slot) - timeSlots.indexOf(b.slot);\r\n      });\r\n\r\n      for (var j = 0; j < slots.length; j++) {\r\n\r\n        var timeSlot = days[i].timeSlots[j];\r\n\r\n        if (timeSlot.available > 0) {\r\n          return (\r\n            <div className=\"Supermarket-info\">\r\n\r\n              <div><span>Next time slot: </span></div>\r\n              <div>{moment(days[i].date, \"YYYY-MM-DD\").format('LL')}</div>\r\n              <div>{timeSlot.slot}</div>\r\n            </div>\r\n          )\r\n        }\r\n      }\r\n    }\r\n\r\n    return <div className=\"Supermarket-info\">\r\n\r\n      <div><span>Time slot: </span></div>\r\n      <div>None</div>\r\n    </div>;\r\n\r\n  }\r\n\r\n  render(): JSX.Element | null {\r\n    return <section>\r\n      <section>\r\n        <h1>{this.props.name}</h1>\r\n      </section>\r\n\r\n      <section>\r\n\r\n        {this.renderNextOpenSpace()}\r\n      </section>\r\n    </section>\r\n  }\r\n}\r\n\r\nexport default SuperMarket;","import React from 'react';\r\nimport './App.css';\r\nimport Helmet from 'react-helmet';\r\nimport Axios from 'axios';\r\nimport { getDistance } from 'geolib';\r\n\r\nimport { Dispatch } from 'redux';\r\nimport { connect } from 'react-redux';\r\nimport { AddTodo } from './state/actions/todo';\r\nimport { RootState } from './state/reducers';\r\nimport * as Types from './models/Types';\r\n\r\nimport SuperMarket from './components/SuperMarket';\r\n\r\n/**\r\n * Defining Connections\r\n */\r\ninterface MapStateType {\r\n  todo: string[];\r\n}\r\n\r\ninterface MapDispatchType {\r\n  AddTodo: (data: Types.AddTodo) => Types.ActionAddTodo;\r\n}\r\n/**\r\n * Mapping Functions\r\n */\r\nconst mapState = (state: RootState): MapStateType => ({ todo: state.todo.todo });\r\n\r\nconst mapDispatch = (dispatch: Dispatch): MapDispatchType => {\r\n  return {\r\n    AddTodo: (data: Types.AddTodo): Types.ActionAddTodo => dispatch(AddTodo(data)),\r\n  };\r\n};\r\n\r\n/**\r\n * App State\r\n */\r\ninterface ComponentState {\r\n  title: string;\r\n  supermarkets: Types.SuperMarketStore[];\r\n  isLoading: boolean;\r\n  userLocation: {\r\n    latitude: number;\r\n    longitude: number;\r\n  }\r\n}\r\n\r\ntype Props = ReturnType<typeof mapState> & ReturnType<typeof mapDispatch>;\r\n\r\n/**\r\n * App Display\r\n */\r\nclass App extends React.Component<Props, ComponentState> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      title: 'New World Order',\r\n      supermarkets: [],\r\n      isLoading: true,\r\n      userLocation: {\r\n        latitude: 0,\r\n        longitude: 0,\r\n      }\r\n    };\r\n\r\n    this.gotUserLocation = this.gotUserLocation.bind(this)\r\n  }\r\n\r\n  gotUserLocation(pos: any) {\r\n\r\n\r\n\r\n    Axios.get(\"https://www.ishopnewworld.co.nz/CommonApi/Store/GetStoreList\").then((res: any) => {\r\n\r\n      this.setState({\r\n        supermarkets: res.data.stores,\r\n        isLoading: false,\r\n        userLocation: {\r\n          latitude: pos.coords.latitude || 0,\r\n          longitude: pos.coords.longitude || 0,\r\n        }\r\n      })\r\n\r\n    })\r\n  }\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(this.gotUserLocation);\r\n\r\n  }\r\n\r\n  renderIsLoading() {\r\n\r\n\r\n    if (this.state.isLoading) {\r\n      return (\r\n        <div className=\"App-info\">\r\n          For this app to work, you will need to allow access to your location. This data is not stored, only to find the nearest stores to you.\r\n        </div>\r\n      )\r\n    } else {\r\n      return (\r\n        <div className=\"App-supermarket-container\">\r\n          {this.state.supermarkets.map((store) => {\r\n\r\n            var withinRange = getDistance(this.state.userLocation, {\r\n              latitude: store.latitude,\r\n              longitude: store.longitude\r\n            })\r\n\r\n            //Distance is within 5km\r\n            if (withinRange > 5000) {\r\n              return null;\r\n            }\r\n\r\n            return (\r\n              <SuperMarket key={store.id} {...store} />\r\n            )\r\n\r\n          })\r\n          }\r\n        </div>\r\n      )\r\n    }\r\n  }\r\n\r\n  render(): JSX.Element | null {\r\n    const { title } = this.state;\r\n\r\n    return (\r\n      <div className=\"App-Container\">\r\n        <Helmet>\r\n          <title>{title}</title>\r\n        </Helmet>\r\n        <header>\r\n          <h1 className=\"title\">{title}</h1>\r\n\r\n        </header>\r\n        <div className=\"App-info\">This webpage gets the next available time slot for all New World Supermarkets within 5km. You will still need to claim the instance, so there is no guarantee it is still available when you shop.</div>\r\n\r\n        <section>\r\n          {this.renderIsLoading()}\r\n        </section>\r\n        <footer>Created by Aran Mason</footer>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default connect(mapState, mapDispatch)(App);\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/),\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (response.status === 404 || (contentType != null && contentType.indexOf('javascript') === -1)) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import * as todo from './todo';\r\n\r\nexport default {\r\n  TODO: todo,\r\n};\r\n","import ACTION from '../actions';\r\nimport { TodoState, TodoTypes } from '../../models/Types';\r\n\r\nconst initialState: TodoState = {\r\n  todo: [] as string[],\r\n};\r\n\r\nexport default function todoReducer(state: TodoState = initialState, action: TodoTypes): TodoState {\r\n  switch (action.type) {\r\n    case ACTION.TODO.ADD:\r\n      return {\r\n        ...state,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport todoReducer from './todo';\r\n\r\nconst rootReducer = combineReducers({\r\n  todo: todoReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunkMiddleware from 'redux-thunk';\r\nimport rootReducer from './reducers';\r\n\r\nconst initialState = {};\r\n\r\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunkMiddleware));\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport { Provider } from 'react-redux';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport store from './state/store';\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}